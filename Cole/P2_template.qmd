---
title: "Client Report - Finding Relationships in Baseball"
subtitle: "Course DS 250"
author: "[Michael Parker]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__  

_My super cool extraction of baseball stats_

```{python}
# Define the query
query = """
SELECT 
    p.playerID,
    cp.schoolID,
    s.salary,
    s.yearID AS salaryYear,
    s.teamID
FROM 
    people p
JOIN 
    salaries s ON p.playerID = s.playerID
JOIN 
    collegeplaying cp ON p.playerID = cp.playerID
WHERE 
    cp.schoolID = 'idbyuid'
GROUP BY 
    p.playerID, 
    s.yearID
ORDER BY 
    s.salary DESC;
"""

# Execute the query and load the results into a DataFrame
df = pd.read_sql_query(query, con)

# Format the 'salary' column as currency with no decimal places
df['salary'] = df['salary'].apply(lambda x: f"${x:,.0f}") 

# Display the DataFrame
df

```


## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__  
    a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.  
    a. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.  
    a. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.  

_type your results and analysis here_

```{python}
# Define the query
query = """
SELECT 
    playerID, 
    yearID, 
    ROUND(H / (AB * 1.0), 3) AS batting_average 
FROM 
    batting
WHERE 
    AB > 0
ORDER BY 
    batting_average DESC, 
    playerID, 
    yearID;
"""

# Execute the query and load the results into a DataFrame
df = pd.read_sql_query(query, con)

# Format the 'batting_average' column to display 3 decimal places using f-string, this is probably overkill
df['batting_average'] = df['batting_average'].apply(lambda x: f"{x:.3f}") 

# Get the top 5 rows
top_5_df = df.head(5) 

# Display the top 5 rows
top_5_df

```

```{python}
# Define the query
query = """
SELECT 
    playerID, 
    yearID, 
    ROUND(H / (AB * 1.0), 3) AS batting_average 
FROM 
    batting
WHERE 
    AB > 9
ORDER BY 
    batting_average DESC, 
    playerID, 
    yearID;
"""

# Execute the query and load the results into a DataFrame
df = pd.read_sql_query(query, con)

# Format the 'batting_average' column to display 3 decimal places using f-string, this is probably overkill
df['batting_average'] = df['batting_average'].apply(lambda x: f"{x:.3f}") 

# Get the top 5 rows
top_5_df = df.head(5) 

# Display the top 5 rows
top_5_df

```

```{python}
# Define the query
query = """
SELECT 
    playerID, 
    ROUND(SUM(H) / (SUM(AB) * 1.0), 3) AS career_batting_average 
FROM 
    batting
GROUP BY 
    playerID
HAVING 
    SUM(AB) >= 100
ORDER BY 
    career_batting_average DESC, 
    playerID;
"""

# Execute the query and load the results into a DataFrame
df = pd.read_sql_query(query, con)

# Format the 'batting_average' column to display 3 decimal places using f-string, this is probably overkill
df['career_batting_average'] = df['career_batting_average'].apply(lambda x: f"{x:.3f}") 

# Get the top 5 rows
top_5_df = df.head(5) 

# Display the top 5 rows
top_5_df

```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__

_type your results and analysis here_

```{python}
# Define the SQL query
query = """
SELECT ID,
       yearID,
       lgID,
       teamID,
       franchID,
       W,
       L,
       HR
  FROM teams 
  WHERE yearID > 1990 AND (franchID = "LAD" OR franchID = "NYY");
"""

# Load the query result into a DataFrame
df = pd.read_sql_query(query, con)

# Filter data for years >= 1995
df_filtered = df[df['yearID'] >= 1995]

# Ensure numeric data and drop rows with missing values
df_filtered['W'] = pd.to_numeric(df_filtered['W'], errors='coerce')
df_filtered['HR'] = pd.to_numeric(df_filtered['HR'], errors='coerce')
df_filtered = df_filtered.dropna(subset=['W', 'HR'])

# Create the scatter plot
p = (
    ggplot(df_filtered, aes(x='yearID')) +
    geom_line(aes(y='HR', color='franchID'), size=1) +
    geom_line(aes(y='W', color='franchID'), size=1, linetype='dashed') +
    ggtitle("Home Runs and Wins Over Time (1995 and later)") +
    xlab("Year") +
    ylab("Value") +
    scale_x_continuous(format=".0f") +  # Ensures clean numeric format on x-axis
    scale_color_discrete(name="Team")  # Adds a legend for team colors
)

# Render the plot
p.show()


```

---

## STRETCH QUESTION|TASK 1

__Advanced Salary Distribution by Position (with Case Statement):__  

    * Write an SQL query that provides a summary table showing the average salary for players in each position (e.g., pitcher, catcher, outfielder) across all years. Include the following columns:

        * position
        * average_salary
        * total_players
        * highest_salary  

    * The highest_salary column should display the highest salary ever earned by a player in that position. If no player in that position has a recorded salary, display “N/A” for the highest salary.  

    * Additionally, create a new column called salary_category using a case statement:  

        * If the average salary is above $1 million, categorize it as “High Salary.”  
        * If the average salary is between $500,000 and $1 million, categorize it as “Medium Salary.”  
        * Otherwise, categorize it as “Low Salary.”  

    * Order the table by average salary in descending order.
    * Print the top 10 rows of this summary table.  

_type your results and analysis here_

```{python}
# Include and execute your code here
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)

sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)

# Define the query
query = """
SELECT 
    F.POS AS position,
    ROUND(SUM(S.salary) / COUNT(S.salary), 2) AS average_salary,
    COUNT(DISTINCT S.playerID) AS total_players,
    CASE 
        WHEN MAX(S.salary) IS NULL THEN 'N/A'
        ELSE MAX(S.salary)
    END AS highest_salary,
    CASE 
        WHEN SUM(S.salary) / COUNT(S.salary) > 1000000 THEN 'High Salary'
        WHEN SUM(S.salary) / COUNT(S.salary) BETWEEN 500000 AND 1000000 THEN 'Medium Salary'
        ELSE 'Low Salary'
    END AS salary_category
FROM 
    Salaries S
JOIN 
    Fielding F ON S.playerID = F.playerID AND S.YearID = F.YearID
WHERE 
    (S.playerID, S.YearID, S.salary) IN (
        SELECT 
            playerID, 
            YearID, 
            MAX(salary)
        FROM 
            Salaries
        GROUP BY 
            playerID, 
            YearID
    )
GROUP BY 
    F.POS
ORDER BY 
    average_salary DESC;

"""

# Execute the query and load the results into a DataFrame
df = pd.read_sql_query(query, con)

# Format the 'salary' column as currency with no decimal places
df['average_salary'] = df['average_salary'].apply(lambda x: f"${x:,.0f}") 
df['highest_salary'] = df['highest_salary'].apply(lambda x: f"${x:,.0f}") 

# Display the DataFrame
df

```


## STRETCH QUESTION|TASK 2

__Advanced Career Longevity and Performance (with Subqueries):__

    * Calculate the average career length (in years) for players who have played at least one game. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their:  

        * playerID
        * first_name
        * last_name
        * career_length

    * The career_length should be calculated as the difference between the maximum and minimum yearID for each player. 

_type your results and analysis here_

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)

sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)

# Define the query
query = """
SELECT 
    playerID,
    nameFirst,
    nameLast,
    debut_date,
    finalgame_date,
    ROUND(CAST((strftime('%J', finalgame_date) - strftime('%J', debut_date)) AS REAL) / 365.25, 2) AS career_length
FROM people
ORDER BY career_length DESC
LIMIT 10;
"""

# Execute the query and load the results into a DataFrame
df = pd.read_sql_query(query, con)

# Display the DataFrame
df


```

---

```{python}

con.close()
```


