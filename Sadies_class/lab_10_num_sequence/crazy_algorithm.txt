def matrix_multiply(A, B):
    a = A[0][0] * B[0][0] + A[0][1] * B[1][0]
    b = A[0][0] * B[0][1] + A[0][1] * B[1][1]
    c = A[1][0] * B[0][0] + A[1][1] * B[1][0]
    d = A[1][0] * B[0][1] + A[1][1] * B[1][1]
    return [[a, b], [c, d]]

def matrix_exponentiation(A, n):
    if n == 1:
        return A
    if n % 2 == 0:
        sqrt_A = matrix_exponentiation(A, n // 2)
        return matrix_multiply(sqrt_A, sqrt_A)
    else:
        sqrt_A = matrix_exponentiation(A, (n - 1) // 2)
        return matrix_multiply(matrix_multiply(sqrt_A, sqrt_A), A)

def francois_algorithm(n):
    A = [[1, 1], [1, 0]]
    sequence = [2, 1]
    if n == 1 or n == 2:
        return sequence
    A_n = matrix_exponentiation(A, n-2)
    nth_term = A_n[0][0]
    sequence.append(nth_term)
    return sequence
